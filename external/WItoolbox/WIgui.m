function WIgui()

clc

global handles
handles = [];

handles.binsize = 1; % window length used to bin data
handles.nscales = 4; % number of scales for wavelet decomposition
handles.nsurr = 50; % number of surrogates for computing shuffling distribution
handles.percentile = 95; % percentile of surrogate distribution for significance
handles.maxwvcoefs = 25; % maximum number of coefs to use
handles.minwvcoefs = 2; % mininum number of coefs to use
handles.crossvalidation_method = '50/50'; % '50/50' or 'Leave-one out'
handles.denoisthrs = 1; % threshold for denoising

handles.newdata = 0;
handles.spiketimes = {};
handles.class_id = [];

f=figure('units','normalized','position',[.1 .1 .7 .8]);clf
set(gcf,'color','w')
set(f, 'MenuBar', 'none');

handles.WIgui.loadspkb = uicontrol ('Style', 'pushbutton', 'String', 'Load spikes','Units','normalized',...
    'Position', ...
    [0.02 0.94 0.12 0.04],...
    'Callback', @WIgui_loadspikes,...
    'BackgroundColor', [1 1 1]*.9,'ForegroundColor', [1 1 1]*0);
set(handles.WIgui.loadspkb,'FontName','Arial')
set(handles.WIgui.loadspkb,'fontsize',15)

handles.WIgui.buttons(1) = ...
    uicontrol ('Style', 'pushbutton', 'String', 'DECODE',...
    'Units','normalized',...
    'Position', ...
    [0.02 0.88 0.12 0.04],...
    'Callback', @WIgui_decode,...
    'BackgroundColor', [1 1 1]*.9,...
    'ForegroundColor', [1 1 1]*0,...
    'fontsize',15);

handles.WIgui.buttons(2) = ...
    uicontrol ('Style', 'pushbutton', 'String', 'DENOISE','Units','normalized',...
    'Position', ...
    [0.02 0.835 0.12 0.04],...
    'Callback', @WIgui_denoise,...
    'BackgroundColor', [1 1 1]*.9,...
    'ForegroundColor', [1 1 1]*0,...
    'fontsize',15);

handles.WIgui.buttons(3) = ...
    uicontrol ('Style', 'pushbutton', 'String', 'Correlations',...
    'Units','normalized',...
    'Position', ...
    [0.02 0.79 0.12 0.04],...
    'Callback', @WIgui_corr,...
    'BackgroundColor', [1 1 1]*.9,...
    'ForegroundColor', [1 1 1]*0,...
    'fontsize',15);

maintextbox = [0.17 .94 .8 .04];
handles.WIgui.maintext = uicontrol('Style','text','Units','normalized',...
    'Position',...
    maintextbox,...
    'String',' ',...
    'BackgroundColor', [1 1 1]*.99,...
    'ForegroundColor', [1 1 1]*0,...
    'horizontalAlignment', 'left',...
    'fontsize',15);

parametersbox = [0.02 .73 .12 .04];
handles.WIgui.parametersbox = ...
    uicontrol('Style','text','Units','normalized',...
    'Position',...
    parametersbox,...
    'String','Parameters',...
    'BackgroundColor', [1 1 1]*.99,...
    'ForegroundColor', [1 1 1]*0,...
    'horizontalAlignment', 'left',...
    'fontsize',15,'horizontalAlignment', 'center');

uicontrol('Style', 'text',...
    'Units','normalized',...
    'String','# scales',...
    'Position', [.02 .635 .12 .1],...
    'BackgroundColor', [1 1 1]*1,...
    'ForegroundColor', [1 1 1]*0,...
    'horizontalAlignment', 'left',...
    'fontsize',12);

handles.parameters.POPUPnscales = ...
    uicontrol('Style', 'popup',...
    'Units','normalized',...
    'String', {'1','2','3','4','5','6'},...
    'Position', [.027 .61 .04 .1],...
    'BackgroundColor', [1 1 1]*1,...
    'ForegroundColor', [1 1 1]*0,...
    'Callback',@WIgui_setnscales,...
    'horizontalAlignment', 'center');
set(handles.parameters.POPUPnscales,'Value',...
    find(~cellfun(@isempty,strfind(get(handles.parameters.POPUPnscales,'String'),...
    num2str(handles.nscales)))))

uicontrol('Style', 'text',...
    'Units','normalized',...
    'String','bin size:',...
    'Position', [.09 .635 .08 .1],...
    'BackgroundColor', [1 1 1]*1,...
    'ForegroundColor', [1 1 1]*0,...
    'horizontalAlignment', 'left',...
    'fontsize',12);

handles.parameters.EDTbinsize = ...
    uicontrol('Style', 'edit',...
    'Units','normalized',...
    'String', num2str(handles.binsize),...
    'Position', [.096 .6875 .04 .025],...
    'BackgroundColor', [1 1 1]*1,...
    'ForegroundColor', [1 1 1]*0,...
    'Callback',@WIgui_setbinsize);

uicontrol('Style', 'text',...
    'Units','normalized',...
    'String','# of coefs',...
    'Position', [.02 .575 .12 .1],...
    'BackgroundColor', [1 1 1]*1,...
    'ForegroundColor', [1 1 1]*0,...
    'horizontalAlignment', 'center',...
    'fontsize',13);

handles.parameters.POPUPminwvcoef = ...
    uicontrol('Style', 'popup',...
    'Units','normalized',...
    'String', {'0','1','2','3','4','5'},...
    'Position', [.0345 .55 .0365 .1],...
    'BackgroundColor', [1 1 1]*1,...
    'ForegroundColor', [1 1 1]*0,...
    'Callback',@WIgui_setmincoefs,...
    'horizontalAlignment', 'center');
set(handles.parameters.POPUPminwvcoef,'Value',...
    find(~cellfun(@isempty,strfind(get(handles.parameters.POPUPminwvcoef,'String'),...
    num2str(handles.minwvcoefs)))))

uicontrol('Style', 'text',...
    'Units','normalized',...
    'String','-',...
    'Position', [.077 .5475 .01 .1],...
    'BackgroundColor', [1 1 1]*1,...
    'ForegroundColor', [1 1 1]*0,...
    'horizontalAlignment', 'center',...
    'fontsize',12);

handles.parameters.POPUPmaxwvcoef = ...
    uicontrol('Style', 'popup',...
    'Units','normalized',...
    'String', {'10','11','12','13','14','15','16',...
    '17','18','19','20','21','22','23','24','25'},...
    'Position', [.095 .55 .0365 .1],...
    'BackgroundColor', [1 1 1]*1,...
    'ForegroundColor', [1 1 1]*0,...
    'Callback',@WIgui_setmaxcoefs,...
    'horizontalAlignment', 'center');
set(handles.parameters.POPUPmaxwvcoef,'Value',...
    find(~cellfun(@isempty,strfind(get(handles.parameters.POPUPmaxwvcoef,'String'),...
    num2str(handles.maxwvcoefs)))))

uicontrol('Style', 'text',...
    'Units','normalized',...
    'String','Cross-valid method',...
    'Position', [.005 .515 .15 .1],...
    'BackgroundColor', [1 1 1]*1,...
    'ForegroundColor', [1 1 1]*0,...
    'horizontalAlignment', 'center',...
    'fontsize',11);

handles.parameters.POPUPxvalidmethod = ...
    uicontrol('Style', 'popup',...
    'Units','normalized',...
    'String', {'50/50','Leave-one out'},...
    'Position', [.025 .495 .12 .1],...
    'BackgroundColor', [1 1 1]*1,...
    'ForegroundColor', [1 1 1]*0,...
    'Callback',@WIgui_setxvalidmethod,...
    'horizontalAlignment', 'center');
set(handles.parameters.POPUPxvalidmethod,'Value',...
    find(~cellfun(@isempty,strfind(get(handles.parameters.POPUPxvalidmethod,'String'),...
    handles.crossvalidation_method))))

uicontrol('Style', 'text',...
    'Units','normalized',...
    'String','Denoising thrshold',...
    'Position', [.005 .46 .15 .1],...
    'BackgroundColor', [1 1 1]*1,...
    'ForegroundColor', [1 1 1]*0,...
    'horizontalAlignment', 'center',...
    'fontsize',11);

handles.parameters.denthrs_slider = ...
    uicontrol('Style', 'slider',...
    'Units','normalized',...
    'String', {'50/50','Leave-one out'},...
    'Position', [.025 .522 .12 .02],...
    'BackgroundColor', [1 1 1]*1,...
    'ForegroundColor', [1 1 1]*0,...
    'Callback',@WIgui_setdenthrs,...
    'horizontalAlignment', 'center',...
    'min',0,'max',20,...
    'sliderstep',[0.0125 .25]);
set(handles.parameters.denthrs_slider,...
    'value',handles.denoisthrs)

handles.WIgui.buttons(4) = ...
    uicontrol ('Style', 'pushbutton', 'String', 'SAVE','Units','normalized',...
    'Position', ...
    [0.02 0.45 0.12 0.04],...
    'Callback', @WIgui_save,...
    'BackgroundColor', [1 1 1]*.9,'ForegroundColor', [1 1 1]*0);
set(handles.WIgui.loadspkb,'FontName','Arial')
set(handles.WIgui.loadspkb,'fontsize',15)

end

function WIgui_loadspikes(a,eventdata) %#ok<DEFNU>

global handles

handles.newdata = 0;
try
    uiopen
    handles.spiketimes = spiketimes;
    handles.class_id = class_id;
    handles.newdata = 1;
catch
    
end

if isempty(handles.spiketimes)
    set(handles.WIgui.maintext,'String',...
        'Spiketimes not loaded.')
elseif isempty(handles.class_id)
    set(handles.WIgui.maintext,'String',...
        'Data not valid! Missing class id variable.')
elseif ~(length(handles.class_id)==length(handles.spiketimes))
    set(handles.WIgui.maintext,'String',...
        'Data not valid! spiketimes and class_id variables do not have same number of trials.',...
        'fontsize',13)
elseif ~iscell(handles.spiketimes)
    set(handles.WIgui.maintext,'String',...
        'Data not valid! Spiketimes variable should be a cell..')
else
    if handles.newdata
        
        if isfield(handles,'decode')
            set(handles.decode.WVcoef_info_subplot,'visible','off')
            subplot(handles.decode.WVcoef_info_subplot)
            cla
            
            try
                delete(handles.decode.confmats([3 7]))
                set(handles.decode.confmats([1 2 5 6]),'visible','off')
            end
            handles = rmfield(handles,'decode');
        end
        
        if isfield(handles,'denoise')
           handles = rmfield(handles,'denoise'); 
        end
        
        if isfield(handles,'matrices')
            handles = rmfield(handles,'matrices');
        end
        
        set(handles.WIgui.maintext,'String','Data loaded!')
        handles.loadspikes.raster_subplot = ...
            subplot('Position',[.17 .5 .8 .43]);
        set(handles.loadspikes.raster_subplot,'ytick',[],...
            'fontsize',13)
        xlabel('Time','fontsize',15)

        WIfunc_plotraster()

    end
    
end
end


function WIgui_decode(a,eventdata) %#ok<DEFNU>

global handles

WIgui_inactivateinputs()

if isempty(handles.spiketimes)
    set(handles.WIgui.maintext,'String',...
        'Cannot decode! Missing spike times.')
elseif isempty(handles.class_id)
    set(handles.WIgui.maintext,'String',...
        'Cannot decode! Missing class id variable.')
else

    if ~isfield(handles,'matrices') || ...
            handles.matrices.actmatrix_binsize~=handles.binsize
        set(handles.WIgui.maintext,'String',...
            'Binning spike trains')
        WIfunc_binmatrix()
    end
    
    if ~isfield(handles.matrices,'wvmatrix') || ...
            handles.matrices.wvmatrix_binsize~=handles.binsize ...
            || handles.matrices.wvmatrix_nscales~=handles.nscales
        set(handles.WIgui.maintext,'String',...
            'Computing wavelet decomposition')
        WIfunc_wavedec()
    end
    
    switch handles.crossvalidation_method
        case '50/50'
            WIfunc_decode_5050()
        case 'Leave-one out'
            WIfunc_decode_leaveoneout()
    end
    
    WIfunc_plotconfustionmats()
    
    set(handles.WIgui.maintext,'String','Done!')
    
end

WIgui_activateinputs()

end

function WIgui_setnscales(source,eventdata) %#ok<DEFNU>

global handles

handles.nscales = ...
    get(handles.parameters.POPUPnscales,'value');
set(handles.WIgui.maintext,'String',...
    ['Number of scales set to ' ...
    num2str(handles.nscales)])

end

function WIgui_setbinsize(source,eventdata) %#ok<DEFNU>

global handles

aux = ...
    str2double(get(handles.parameters.EDTbinsize,'string'));
if isnan(aux)
    set(handles.parameters.EDTbinsize,...
        'string',num2str(handles.binsize));
    set(handles.WIgui.maintext,'String',...
        'You have not entered a valid number. Bin size not changed!')
elseif aux<=0
    figure
    x=imread('WIviro.m');
    imagesc(x)
    set(gca,'xtick',[],'ytick',[])
    set(handles.parameters.EDTbinsize,...
        'string',num2str(handles.binsize));
else
    handles.binsize = aux;
    set(handles.WIgui.maintext,'String',...
        ['Bin size set to ' ...
        num2str(handles.binsize)])
end


end

function WIgui_setmincoefs(source,eventdata) %#ok<DEFNU>

global handles

handles.minwvcoefs = ...
    get(handles.parameters.POPUPminwvcoef,'value')-1;
set(handles.WIgui.maintext,'String',...
    ['Minimum number of coefficients set to ' ...
    num2str(handles.minwvcoefs)])

end

function WIgui_setmaxcoefs(source,eventdata) %#ok<DEFNU>

global handles

handles.maxwvcoefs = ...
    get(handles.parameters.POPUPmaxwvcoef,'value')+9;
set(handles.WIgui.maintext,'String',...
    ['Maximum number of coefficients set to ' ...
    num2str(handles.maxwvcoefs)])

end

function WIgui_setxvalidmethod(source,eventdata) %#ok<DEFNU>

global handles

aux = get(handles.parameters.POPUPxvalidmethod,'string');
handles.crossvalidation_method = ...
    aux{get(handles.parameters.POPUPxvalidmethod,'value')};
set(handles.WIgui.maintext,'String',...
    ['Cross-validation method set to ' ...
    handles.crossvalidation_method])

end

function WIgui_denoise(a,eventdata) %#ok<DEFNU>

global handles

WIgui_inactivateinputs()

set(handles.WIgui.maintext,'String','Denoising...')

if isempty(handles.spiketimes)
    set(handles.WIgui.maintext,'String',...
        'Cannot denoise! Missing spike times.')
elseif isempty(handles.class_id)
    set(handles.WIgui.maintext,'String',...
        'Cannot denoise! Missing class id variable.')
else    
    
    if ~isfield(handles,'matrices') || ...
            handles.matrices.actmatrix_binsize~=handles.binsize
        set(handles.WIgui.maintext,'String',...
            'Binning spike trains')
        WIfunc_binmatrix()
    end
    
    if ~isfield(handles.matrices,'wvmatrix') || ...
            handles.matrices.wvmatrix_binsize~=handles.binsize ...
            || handles.matrices.wvmatrix_nscales~=handles.nscales
        set(handles.WIgui.maintext,'String',...
            'Computing wavelet decomposition')
        WIfunc_wavedec()
    end
    
    handles.decode.trainingtrials = 1:length(handles.spiketimes);
    WIfunc_select_coefs()
    
    WIfunc_denoisemasks()
    WIfunc_denoise()
    WIfunc_plotraster()
    
    set(handles.WIgui.maintext,'String','Done!')
    
end

WIgui_activateinputs()

end

function WIgui_setdenthrs(a,eventdata) %#ok<DEFNU>

global handles

handles.denoisthrs = get(a,'value');
set(handles.WIgui.maintext,'String',...
    ['Denoising threshold set to: ' ...
    num2str(handles.denoisthrs) ' stds'])
if isfield(handles,'denoise')
    
    WIfunc_denoisemasks()    
    WIfunc_denoise()
    WIfunc_plotraster()
end

end

function WIgui_corr(a,eventdata) %#ok<DEFNU>

global handles

set(handles.WIgui.maintext,'String','Correlations not ready in current version...')

end

function WIgui_save(a,eventdata) %#ok<DEFNU>

global handles

WIgui_inactivateinputs()

set(handles.WIgui.maintext,'String','Preparing data to save...')

if isfield(handles,'decode') || ...
        isfield(handles,'denoise')
    
    WIdata.binsize = handles.binsize;
    WIdata.nscales = handles.nscales;
    WIdata.crossvalidation_method = ...
        handles.crossvalidation_method;
    
    if isfield(handles,'decode')
        WIdata.SPKCNTconfusionmatrix = ...
            handles.decode.SPKCNTconfusionmatrix;
        WIdata.SPKCNTperf = handles.decode.SPKCNTperf;
        WIdata.WVconfusionmatrix = ...
            handles.decode.WVconfusionmatrix;
        WIdata.WVperf = handles.decode.WVperf;
    end
    
    if isfield(handles,'denoise')
        WIdata.denoised_spiketimes = ...
            handles.denoise.denoised_spiketimes;
    end
    
    uisave('WIdata','WIdata.mat')
    
else
    set(handles.WIgui.maintext,'String','Nothing to save')
end

WIgui_activateinputs()

end

function WIgui_inactivateinputs(a,eventdata) %#ok<DEFNU>

global handles

set(handles.parameters.POPUPnscales,'Enable','off') 
set(handles.parameters.EDTbinsize,'Enable','off') 
set(handles.parameters.POPUPminwvcoef,'Enable','off') 
set(handles.parameters.POPUPmaxwvcoef,'Enable','off') 
set(handles.parameters.POPUPxvalidmethod,'Enable','off') 
set(handles.parameters.denthrs_slider,'Enable','off') 
set(handles.WIgui.loadspkb,'Enable','off') 
set(handles.WIgui.buttons,'Enable','off') 

end

function WIgui_activateinputs(a,eventdata) %#ok<DEFNU>

global handles

set(handles.parameters.POPUPnscales,'Enable','on') 
set(handles.parameters.EDTbinsize,'Enable','on') 
set(handles.parameters.POPUPminwvcoef,'Enable','on') 
set(handles.parameters.POPUPmaxwvcoef,'Enable','on') 
set(handles.parameters.POPUPxvalidmethod,'Enable','on') 
set(handles.parameters.denthrs_slider,'Enable','on') 
set(handles.WIgui.loadspkb,'Enable','on') 
set(handles.WIgui.buttons,'Enable','on') 

end